package nvd

import (
	"errors"

	"github.com/urfave/cli/v2"
)

type NVDConfig struct {
	NvdApiKey      string   `json:"nvd_api_key"`
	CveSeverities  string   `json:"cve_severities"`
	IncludeFilters []string `json:"include_filters"`
	ExcludeFilters []string `json:"exclude_filters"`
}

func DefaultConfig() NVDConfig {
	return NVDConfig{
		CveSeverities:  "HIGH",
		IncludeFilters: []string{},
		ExcludeFilters: []string{},
	}
}

func (config *NVDConfig) Parameters() []cli.Flag {
	defaults := DefaultConfig()

	return []cli.Flag{
		&cli.StringFlag{
			Name:        "nvd-api-key",
			Usage:       "NVD API Key",
			EnvVars:     []string{"NVD_API_KEY"},
			Value:       defaults.NvdApiKey,
			Destination: &config.NvdApiKey,
		},
		&cli.StringFlag{
			Name:        "cve-severities",
			Usage:       "The severity level that should be monitored. options: LOW, MEDIUM, HIGH, CRITICAL. Deault: HIGH",
			EnvVars:     []string{"CVE_SEVERITIES"},
			Value:       defaults.CveSeverities,
			Destination: &config.CveSeverities,
		},
		&cli.StringSliceFlag{
			Name:    "include-filters",
			Usage:   "List of strings that must be included in the CVE description",
			EnvVars: []string{"INCLUDE_FILTERS"},
		},
		&cli.StringSliceFlag{
			Name:    "exclude-filters",
			Usage:   "List of strings that must not exist in the CVE description (Takes precendence over include filters)",
			EnvVars: []string{"EXCLUDE_FILTERS"},
		},
	}
}

func (config *NVDConfig) Validate() error {
	if config.NvdApiKey == "" {
		return errors.New("NVD api key must be provided")
	}

	return nil
}
