package nvd

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var cves = []Vulnerability{
	{
		CVE{
			ID:               "CVE-2023-23952",
			SourceIdentifier: "secure@example.com",
			Published:        "2023-06-01T01:15:17.687",
			LastModified:     "2023-06-06T14:30:45.323",
			VulnStatus:       "Analyzed",
			Descriptions:     []Description{{Lang: "en", Value: "Example description"}},
			Metrics: Metric{
				CvssMetricV31: []CvssMetricV31{
					{
						Source: "NVD",
						CvssData: CvssData{
							AttackVector: "NETWORK",
							BaseScore:    9.8,
							BaseSeverity: "CRITICAL",
						},
					},
				},
			},
			Weaknesses: []Weakness{
				{},
			},
			References: []Reference{},
		},
	},
	{
		CVE{
			ID:               "CVE-2023-12345",
			SourceIdentifier: "secure@example.com",
			Published:        "2023-06-02T01:15:17.687",
			LastModified:     "2023-06-07T14:30:45.323",
			VulnStatus:       "Analyzed",
			Descriptions: []Description{
				{Lang: "en", Value: "First Example description multiple"},
				{Lang: "en", Value: "Second Example description multiple"},
			},
			Metrics: Metric{
				CvssMetricV31: []CvssMetricV31{
					{
						Source: "NVD",
						CvssData: CvssData{
							AttackVector: "NETWORK",
							BaseScore:    9.8,
							BaseSeverity: "CRITICAL",
						},
					},
				},
			},
			Weaknesses: []Weakness{
				{},
			},
			References: []Reference{},
		},
	},
}

func TestFilterCVEs(t *testing.T) {
	t.Run("Parse CVEs without filters", func(t *testing.T) {

		client := NewClient(NVDConfig{}, []string{}, []string{})
		actual := client.FilterCVEs(cves)

		assert.Equal(t, 2, len(actual))
		assert.Equal(t, "CVE-2023-12345", actual[1].ID)
	})
}

func TestFilterCVEs_description_multiple_matches(t *testing.T) {

	t.Run("include CVE once", func(t *testing.T) {
		client := NewClient(NVDConfig{}, []string{"aws", "kubernetes", "multiple"}, []string{})
		actual := client.FilterCVEs(cves)

		assert.Equal(t, 1, len(actual))
		assert.Equal(t, "CVE-2023-12345", actual[0].ID)
	})
}

func TestFilterCVEs_case_insensitive(t *testing.T) {
	t.Run("Case insensitive filter match", func(t *testing.T) {

		client := NewClient(NVDConfig{}, []string{"EXAMPLE"}, []string{})
		actual := client.FilterCVEs(cves)

		assert.Equal(t, 2, len(actual))
	})
}

func TestFilterCVEs_excludefilter(t *testing.T) {
	t.Run("Parse CVEs with exclude filter", func(t *testing.T) {

		client := NewClient(NVDConfig{}, []string{}, []string{"First"})
		actual := client.FilterCVEs(cves)

		assert.Equal(t, 1, len(actual))
	})
}
