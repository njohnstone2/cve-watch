package main

import (
	"encoding/json"
	"fmt"

	"github.com/njohnstone2/cve-watch/internal/nvd"
	log "github.com/sirupsen/logrus"
	"github.com/slack-go/slack"
)

func buildMessage(e nvd.CVE) slack.Message {

	emoji := ""
	severity := e.Metrics.CvssMetricV31[0].CvssData.BaseSeverity
	switch {
	case severity == "CRITICAL":
		emoji = ":bangbang:"
	case severity == "HIGH":
		emoji = ":warning:"
	default:
		emoji = ":grey_exclamation:"
	}

	// Header Section
	headerText := slack.NewTextBlockObject("plain_text", fmt.Sprintf("%s %s detected %s", emoji, e.ID, emoji), false, false)
	headerSection := slack.NewHeaderBlock(headerText, slack.HeaderBlockOptionBlockID("test_block"))

	// Fields
	idField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*ID:*\n<https://nvd.nist.gov/vuln/detail/%s|%s>", e.ID, e.ID), false, false)
	whenField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Time:*\n%s", e.Published), false, false)
	sourceField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Source:*\n%s", e.SourceIdentifier), false, false)
	statusField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Attack Vector:*\n%s", e.Metrics.CvssMetricV31[0].CvssData.AttackVector), false, false)
	severityField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Severity:*\n%s", e.Metrics.CvssMetricV31[0].CvssData.BaseSeverity), false, false)
	exploitScoreField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Exploitability Score:*\n%.2f", e.Metrics.CvssMetricV31[0].ExploitabilityScore), false, false)
	baseScoreField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Base Score:*\n%.2f", e.Metrics.CvssMetricV31[0].CvssData.BaseScore), false, false)
	impactScoreField := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Impact Score:*\n%.2f", e.Metrics.CvssMetricV31[0].ImpactScore), false, false)

	fieldSlice := make([]*slack.TextBlockObject, 0)
	fieldSlice = append(fieldSlice, idField)
	fieldSlice = append(fieldSlice, sourceField)
	fieldSlice = append(fieldSlice, severityField)
	fieldSlice = append(fieldSlice, whenField)
	fieldSlice = append(fieldSlice, statusField)
	fieldSlice = append(fieldSlice, exploitScoreField)
	fieldSlice = append(fieldSlice, baseScoreField)
	fieldSlice = append(fieldSlice, impactScoreField)

	fieldsSection := slack.NewSectionBlock(nil, fieldSlice, nil)

	refsText := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Links:*\n```%s```", buildReferences(e.References)), false, false)
	refsSection := slack.NewSectionBlock(refsText, nil, nil)

	detailsText := slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*Description:*\n```%v```", buildDescriptions(e.Descriptions)), false, false)
	detailsSection := slack.NewSectionBlock(detailsText, nil, nil)

	msg := slack.NewBlockMessage(
		headerSection,
		fieldsSection,
		detailsSection,
		refsSection,
	)

	return msg
}

func toJsonString(data interface{}) string {
	b, err := json.MarshalIndent(data, "", "    ")
	if err != nil {
		log.WithError(err).Error("failed_to_parse_params")
	}
	return string(b)
}

func buildDescriptions(d []nvd.Description) string {
	var s string
	for _, desc := range d {
		s = fmt.Sprintf("%s\n%s", s, desc.Value)
	}
	return s
}

func buildReferences(refs []nvd.Reference) string {
	var s string
	for _, r := range refs {
		s = fmt.Sprintf("%s\n%s", s, r.URL)
	}
	return s
}
