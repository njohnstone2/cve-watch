package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/njohnstone2/cve-watch/handlers"
	log "github.com/sirupsen/logrus"
	"github.com/slack-go/slack"
	"github.com/urfave/cli/v2"
)

const (
	timeFormat = "2006-01-02T15:04:05.000"
	baseUrl    = "https://services.nvd.nist.gov/rest/json/cves/2.0"
)

func main() {
	config := DefaultConfig()

	app := &cli.App{
		Name:  "cve-watch",
		Usage: "monitors the National Vulnerability Database (NVD) for new CVE's",
		Flags: config.Parameters(),
		Action: func(*cli.Context) error {
			validationError := config.Validate()
			if validationError != nil {
				return validationError
			}

			interrupt := make(chan os.Signal, 1)
			signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

			r := handlers.Router()
			srv := &http.Server{
				Addr:    fmt.Sprintf(":%d", config.HTTPPort),
				Handler: r,
			}

			shutdown := make(chan struct{}, 1)
			go func() {
				err := srv.ListenAndServe()
				if err != nil {
					shutdown <- struct{}{}
					log.Printf("%v", err)
				}
			}()
			log.Print("The service is ready to listen and serve.")

			interval, err := time.ParseDuration(fmt.Sprintf("%dm", config.IntervalMins))
			if err != nil {
				log.WithError(err).Error("failed_to_parse_poll_interval")
			}

			severities := strings.Split(config.CveSeverities, ",")
			client := &httpClient{apiToken: config.NvdApiKey}

			// Run the query every minute
			go func() {
				for {
					for _, s := range severities {
						err := fetchCves(config, *client, interval, s)
						if err != nil {
							log.WithError(err).Error("failed_to_fetch_cves")
						}
					}

					// Sleep for the defined interval before making the next request
					time.Sleep(interval)
				}
			}()

			select {
			case killSignal := <-interrupt:
				switch killSignal {
				case os.Interrupt:
					log.Print("Received SIGINT...")
				case syscall.SIGTERM:
					log.Print("Received SIGTERM...")
				}
			case <-shutdown:
				log.Printf("Received an error...")
			}

			log.Print("The service is shutting down...")
			srv.Shutdown(context.Background())

			return nil
		},
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}

func fetchCves(config Config, client httpClient, interval time.Duration, severity string) error {
	// Set up the API endpoint URL
	now := time.Now()
	endtime := now.Format(timeFormat)
	starttime := now.Add(-interval).Format(timeFormat)
	url := fmt.Sprintf("%s/?pubStartDate=%s&pubEndDate=%s&cvssV3Severity=%s", baseUrl, starttime, endtime, severity)
	log.WithField("url", url).Info("Querying API")

	// Make the HTTP GET request
	response, err := client.Get(url)
	if err != nil {
		handlers.SetReadyz(false)
		return err
	}
	if response.StatusCode == http.StatusOK {
		handlers.SetReadyz(true)
	}

	// Read the response body
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return err
	}

	// Parse the JSON response
	var data APIResponse
	err = json.Unmarshal(body, &data)
	if err != nil {
		return err
	}

	// Process each CVE
	for _, item := range data.Vulnerabilities {
		log.WithField("id", item.CVE.ID).Debug("processing_cve")
		msg := buildMessage(item.CVE)
		pErr := slackPost(config.SlackToken, config.SlackChannelId, msg)
		if pErr != nil {
			log.WithError(pErr).Error("failed_post_to_slack")
			os.Exit(1)
		}
	}

	if len(data.Vulnerabilities) == 0 {
		log.Info("No new CVEs found")
	}

	return nil
}

func slackPost(token, channelId string, msg slack.Message) error {
	api := slack.New(token)
	channelID, timestamp, err := api.PostMessage(
		channelId,
		slack.MsgOptionBlocks(msg.Blocks.BlockSet...),
		slack.MsgOptionAsUser(true),
	)
	if err != nil {
		return err
	}
	log.WithFields(log.Fields{
		"channel_id": channelID,
		"timestamp":  timestamp,
	}).Info("Message successfully sent to channel")

	return nil
}
