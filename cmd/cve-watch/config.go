package main

import (
	"errors"

	"github.com/urfave/cli/v2"
)

type Config struct {
	NvdApiKey      string `json:"nvd_api_key"`
	SlackToken     string `json:"slack_token"`
	SlackChannelId string `json:"slack_channel_id"`
	LogLevel       string `json:"log_level"`
	LogFormat      string `json:"log_format"`
	IntervalMins   int    `json:"interval_mins"`
	CveSeverities  string `json:"cve_severities"`
	HTTPPort       int    `json:"http_port"`
}

func DefaultConfig() Config {
	return Config{
		LogLevel:      "INFO",
		IntervalMins:  5,
		CveSeverities: "HIGH",
		HTTPPort:      8080,
	}
}

func (config *Config) Parameters() []cli.Flag {
	defaults := DefaultConfig()

	return []cli.Flag{
		&cli.StringFlag{
			Name:        "nvd-api-key",
			Usage:       "NVD API Key",
			EnvVars:     []string{"NVD_API_KEY"},
			Value:       defaults.NvdApiKey,
			Destination: &config.NvdApiKey,
		},
		&cli.StringFlag{
			Name:        "slack-token",
			Usage:       "Slack bot token",
			EnvVars:     []string{"SLACK_TOKEN"},
			Value:       defaults.SlackToken,
			Destination: &config.SlackToken,
		},
		&cli.StringFlag{
			Name:        "slack-channel-id",
			Usage:       "Slack channel ID",
			EnvVars:     []string{"SLACK_CHANNEL_ID"},
			Value:       defaults.SlackChannelId,
			Destination: &config.SlackChannelId,
		},
		&cli.StringFlag{
			Name:        "log-level",
			Usage:       "Application log level. Default: INFO",
			EnvVars:     []string{"LOG_LEVEL"},
			Value:       defaults.LogLevel,
			Destination: &config.LogLevel,
		},
		&cli.IntFlag{
			Name:        "interval-mins",
			Usage:       "Frequency the NVD API should be polled. Deault: 5",
			EnvVars:     []string{"INTERVAL_MINS"},
			Value:       defaults.IntervalMins,
			Destination: &config.IntervalMins,
		},
		&cli.StringFlag{
			Name:        "cve-severities",
			Usage:       "The severity level that should be monitored. options: LOW, MEDIUM, HIGH, CRITICAL. Deault: HIGH",
			EnvVars:     []string{"CVE_SEVERITIES"},
			Value:       defaults.CveSeverities,
			Destination: &config.CveSeverities,
		},
		&cli.IntFlag{
			Name:        "http-port",
			Usage:       "HTTP Port that is used for health checks",
			EnvVars:     []string{"HTTP_PORT"},
			Value:       defaults.HTTPPort,
			Destination: &config.HTTPPort,
		},
	}
}

func (config *Config) Validate() error {
	if config.NvdApiKey == "" {
		return errors.New("NVD api key must be provided")
	}

	if config.SlackToken == "" {
		return errors.New("slack bot token must be provided")
	}

	if config.SlackChannelId == "" {
		return errors.New("slack channel ID must be provided")
	}

	return nil
}
