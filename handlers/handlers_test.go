package handlers

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestRouter(t *testing.T) {
	r := Router()
	ts := httptest.NewServer(r)
	defer ts.Close()

	healthRes, healthErr := http.Get(ts.URL + "/healthz")
	if healthErr != nil {
		t.Fatal(healthErr)
	}
	if healthRes.StatusCode != http.StatusOK {
		t.Errorf("Status code for /healthz is wrong. Have: %d, want: %d.", healthRes.StatusCode, http.StatusOK)
	}

	SetReadyz(true)
	readyRes, readyErr := http.Get(ts.URL + "/readyz")
	if readyErr != nil {
		t.Fatal(readyErr)
	}
	if readyRes.StatusCode != http.StatusOK {
		t.Errorf("Status code for /readyz is wrong. Have: %d, want: %d.", readyRes.StatusCode, http.StatusOK)
	}

	SetReadyz(false)
	notReadyRes, notReadyErr := http.Get(ts.URL + "/readyz")
	if notReadyErr != nil {
		t.Fatal(notReadyErr)
	}
	if notReadyRes.StatusCode != http.StatusServiceUnavailable {
		t.Errorf("Status code for /readyz is wrong. Have: %d, want: %d.", notReadyRes.StatusCode, http.StatusOK)
	}

	notFoundRes, notFoundErr := http.Get(ts.URL + "/not-exists")
	if notFoundErr != nil {
		t.Fatal(notFoundErr)
	}
	if notFoundRes.StatusCode != http.StatusNotFound {
		t.Errorf("Status code for invalid path did not return 404. Have: %d, want: %d.", notFoundRes.StatusCode, http.StatusNotFound)
	}
}
