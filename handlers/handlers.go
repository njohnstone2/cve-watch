package handlers

import (
	"net/http"
	"sync/atomic"

	"github.com/gorilla/mux"
)

var isReady = &atomic.Value{}

// Router register necessary routes and returns an instance of a router.
func Router() *mux.Router {
	isReady.Store(false)

	r := mux.NewRouter()
	r.HandleFunc("/healthz", healthz)
	r.HandleFunc("/readyz", readyz(isReady))
	return r
}

// Liveness probe.
func healthz(w http.ResponseWriter, _ *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("Healthz"))
}

// Readiness probe.
func readyz(isReady *atomic.Value) http.HandlerFunc {
	return func(w http.ResponseWriter, _ *http.Request) {
		if isReady == nil || !isReady.Load().(bool) {
			http.Error(w, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("Readyz"))
	}
}

func SetReadyz(ready bool) {
	isReady.Store(ready)
}
